import java.util.HashSet;
import java.util.Set;

class Solution {
    public int findPairs(int[] nums, int k) {
        if (k < 0) {
            return 0; // Invalid input, as k cannot be negative for absolute difference
        }

        Set<Integer> uniquePairs = new HashSet<>();
        Set<Integer> seen = new HashSet<>();

        for (int num : nums) {
            if (k == 0) {
                if (!seen.add(num)) {
                    uniquePairs.add(num);
                }
            } else {
                if (seen.contains(num)) {
                    continue;
                }
                if (seen.contains(num - k)) {
                    uniquePairs.add(num - k);
                }
                if (seen.contains(num + k)) {
                    uniquePairs.add(num);
                }
            }

            seen.add(num);
        }

        return uniquePairs.size();
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example 1
        int[] nums1 = {3, 1, 4, 1, 5};
        int k1 = 2;
        System.out.println(solution.findPairs(nums1, k1)); // Output: 2

        // Example 2
        int[] nums2 = {1, 2, 3, 4, 5};
        int k2 = 1;
        System.out.println(solution.findPairs(nums2, k2)); // Output: 4

        // Example 3
        int[] nums3 = {1, 3, 1, 5, 4};
        int k3 = 0;
        System.out.println(solution.findPairs(nums3, k3)); // Output: 1
    }
}
