class Solution {
    public int equalSubstring(String s, String t, int maxCost) {
        int n = s.length();
        int[] costArray = new int[n];

        // Calculate the cost of transforming each character from s to t
        for (int i = 0; i < n; i++) {
            costArray[i] = Math.abs(s.charAt(i) - t.charAt(i));
        }

        int maxLength = 0;
        int currentCost = 0;
        int start = 0;

        // Use a sliding window to find the maximum length substring
        for (int end = 0; end < n; end++) {
            currentCost += costArray[end];

            // If the cost exceeds maxCost, move the window forward
            while (currentCost > maxCost) {
                currentCost -= costArray[start];
                start++;
            }

            // Update the maximum length
            maxLength = Math.max(maxLength, end - start + 1);
        }

        return maxLength;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example 1
        String s1 = "abcd";
        String t1 = "bcdf";
        int maxCost1 = 3;
        System.out.println(solution.equalSubstring(s1, t1, maxCost1)); // Output: 3

        // Example 2
        String s2 = "abcd";
        String t2 = "cdef";
        int maxCost2 = 3;
        System.out.println(solution.equalSubstring(s2, t2, maxCost2)); // Output: 1

        // Example 3
        String s3 = "abcd";
        String t3 = "acde";
        int maxCost3 = 0;
        System.out.println(solution.equalSubstring(s3, t3, maxCost3)); // Output: 1
    }
}
