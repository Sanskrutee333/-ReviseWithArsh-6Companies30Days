class Solution {
    public boolean isValidSerialization(String preorder) {
        String[] nodes = preorder.split(",");
        Stack<String> stack = new Stack<>();

        for (String node : nodes) {
            stack.push(node);

            // Check if the current pattern is "X,#,#"
            while (stack.size() >= 3
                    && stack.get(stack.size() - 1).equals("#")
                    && stack.get(stack.size() - 2).equals("#")
                    && !stack.get(stack.size() - 3).equals("#")) {

                // Pop the pattern "X,#,#" and replace it with a single '#'
                stack.pop(); // Pop the last '#'
                stack.pop(); // Pop the second '#'
                stack.pop(); // Pop 'X'
                stack.push("#"); // Replace the pattern with a single '#'
            }
        }

        // Check if the stack contains only a single '#', indicating a valid serialization
        return stack.size() == 1 && stack.peek().equals("#");
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example 1
        String preorder1 = "9,3,4,#,#,1,#,#,2,#,6,#,#";
        System.out.println(solution.isValidSerialization(preorder1)); // Output: true

        // Example 2
        String preorder2 = "1,#";
        System.out.println(solution.isValidSerialization(preorder2)); // Output: false

        // Example 3
        String preorder3 = "9,#,#,1";
        System.out.println(solution.isValidSerialization(preorder3)); // Output: false
    }
}
